
import vk_api
import datetime
import threading

from app.models import Model
from app.vk.src.logger import Logger
from app.vk.src.portal import date_name
from app.vk.src.keyboards import Keyboards
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.utils import get_random_id

class Bot:
    """

    –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É–∏—Ä—É–µ—Ç –±–æ—Ç–∞

    """

    def __init__(self, token, group_id):
        self.vk_session = vk_api.VkApi(token = token)
        self.vk = self.vk_session.get_api()
        self.longpoll = VkBotLongPoll(self.vk_session, group_id)
        self.model = Model()
        self.keyboard = Keyboards()

    def test(self):
        print("tests")

    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    def main_menu(self, user):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        :param user:
        :return:
        """
        self.vk.messages.send(
            peer_id=user.user_id,
            random_id=get_random_id(),
            message='–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç –º–µ–Ω—é',
            keyboard=self.keyboard.main_menu(user)
        )

    def settings_menu(self, user):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        :param user:
        :return:
        """
        self.vk.messages.send(
            peer_id=user.user_id,
            random_id=get_random_id(),
            message='–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç –º–µ–Ω—é',
            keyboard=self.keyboard.settings_menu(user)
        )

    def change_group_menu(self, user):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ —Å–ø–æ—Å–æ–±–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
        :param user:
        :return:
        """
        self.vk.messages.send(
            peer_id=user.user_id,
            random_id=get_random_id(),
            message='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã\n–ù–∞–ø—Ä–∏–º–µ—Ä: "–ü–ò18-1"',
            keyboard=VkKeyboard().get_empty_keyboard(),
        )

    def find_teacher_start(self, user):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ–µ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ —Ç–æ–º, —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        :param user:
        :return:
        """
        self.vk.messages.send(
            peer_id=user.user_id,
            random_id=get_random_id(),
            message='–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏–ª–∏ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è',
            keyboard=VkKeyboard().get_empty_keyboard(),
        )

    """
    –§—É–Ω–∫—Ü–∏–∞–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    """

    def get_schedule(self, user, day):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –≤–º–µ—Å—Ç–µ —Å –º–µ–Ω—é
        :param user: –¥–∞–Ω–Ω—ã–µ user –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        :param day: –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è, –∫–æ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        :return:
        """
        if day == "—Å–µ–≥–æ–¥–Ω—è" or day == "–∑–∞–≤—Ç—Ä–∞":
            if day == "—Å–µ–≥–æ–¥–Ω—è":
                date = datetime.datetime.today() + datetime.timedelta(hours=0)
            elif day == "–∑–∞–≤—Ç—Ä–∞":
                date =(datetime.datetime.today() + datetime.timedelta(days=1, hours=0))
            day = date.strftime('%d/%m/%Y')
            data = self.model.get_schedule(user, day)
            if data is None:
                self.vk.messages.send(
                    peer_id=user.user_id,
                    random_id=get_random_id(),
                    message="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                )
            elif data == []:
                response = f"üìÖ {date_name(date)}, {day}\n–ù–µ—Ç –ø–∞—Ä"
            elif data is not None:
                response = [f"üìÖ {date_name(date)}, {day}"]
                for object in data:
                    if object.pair_location is None:
                        pair_location = ""
                    else:
                        pair_location = f"\n–ì–¥–µ: {object.pair_location}"
                    if object.pair_teacher is None:
                        pair_teacher = ""
                    else:
                        pair_teacher = f"\n–ö—Ç–æ: {object.pair_teacher}"
                    if object.pair_type == "–≠–∫–∑–∞–º–µ–Ω":
                        pair_type = f"\n‚ùó Ô∏è–≠–∫–∑–∞–º–µ–Ω ‚ùóÔ∏è"
                    else:
                        pair_type = f"\n{object.pair_type}"
                    response.append(f"‚è±{object.pair_time}‚è±\n{object.pair_name}{pair_type}{pair_location}{pair_teacher}")
                response = '\n\n'.join(response)
            self.vk.messages.send(
                peer_id=user.user_id,
                random_id=get_random_id(),
                message=response,
            )
        elif day == "—Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è" or day == "—ç—Ç–∞ –Ω–µ–¥–µ–ª—è":
            if day == "—ç—Ç–∞ –Ω–µ–¥–µ–ª—è":
                weekrange = range(6)
            elif day == "—Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è":
                weekrange = range(7, 13)
            weekday = (datetime.datetime.today() + datetime.timedelta(hours=0)).weekday()
            response = []
            for delta in weekrange:
                date = (datetime.datetime.today() + datetime.timedelta(days=delta - weekday, hours=0))
                day = date.strftime('%d/%m/%Y')
                data = self.model.get_schedule(user, day)
                if data is None:
                    self.vk.messages.send(
                        peer_id=user.user_id,
                        random_id=get_random_id(),
                        message="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ",
                    )
                elif data == []:
                    response.append(f"\nüìÖ {date_name(date)}, {day}\n–ù–µ—Ç –ø–∞—Ä")
                elif data is not None:
                    response.append(f"\nüìÖ {date_name(date)}, {day}")
                    for object in data:
                        if object.pair_location is None:
                            pair_location = ""
                        else:
                            pair_location = f"\n–ì–¥–µ: {object.pair_location}"
                        if object.pair_teacher is None:
                            pair_teacher = ""
                        else:
                            pair_teacher = f"\n–ö—Ç–æ: {object.pair_teacher}"
                        if object.pair_type == "–≠–∫–∑–∞–º–µ–Ω":
                            pair_type = f"\n‚ùó Ô∏è–≠–∫–∑–∞–º–µ–Ω ‚ùóÔ∏è"
                        else:
                            pair_type = f"\n{object.pair_type}"
                        response.append(" ")
                        response.append(
                            f"‚è±{object.pair_time}‚è±\n{object.pair_name}{pair_type}{pair_location}{pair_teacher}")
            response_text = ""
            for object in response:
                response_text += object + "\n"
            self.vk.messages.send(
                peer_id=user.user_id,
                random_id=get_random_id(),
                message=response_text,
            )
        self.main_menu(user)


    def update_group_name(self, user, message):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–∏ —ç—Ç–æ–º –¥–µ–ª–∞—è –∑–∞–ø—Ä–æ—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –ò–û–ü–∞
        :param user:
        :param message:
        :return:
        """
        message = message.upper().replace(" ", "")
        group_model = self.model.update_group_name(user, message)
        if group_model is not None:
            if self.model.get_schedule(user, (datetime.datetime.today() + datetime.timedelta(hours=0)).strftime('%d/%m/%Y')) is None:
                self.vk.messages.send(
                    peer_id=user.user_id,
                    random_id=get_random_id(),
                    message="–ò—â–µ–º –≤–∞—à—É –≥—Ä—É–ø–ø—É...",
                )
                if self.model.update_schedule(user) == True:
                    message = f'–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "{message}"'
                else:
                    message = f'–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É –Ω–∞ "{message}"'
                self.vk.messages.send(
                    peer_id=user.user_id,
                    random_id=get_random_id(),
                    message=message,
                )
            else:
                self.vk.messages.send(
                    peer_id=user.user_id,
                    random_id=get_random_id(),
                    message=f'–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "{message}"',
                )
        else:
            self.vk.messages.send(
                peer_id=user.user_id,
                random_id=get_random_id(),
                message=f'–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É –Ω–∞ "{message}"',
            )

    def find_teacher(self, user, teacher_name):
        self.vk.messages.send(
            peer_id=user.user_id,
            random_id=get_random_id(),
            message='–ò—â–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è...',
            keyboard=VkKeyboard().get_empty_keyboard(),
        )
        teacher = self.model.find_teacher(user, teacher_name)
        if teacher is not None:
            keyboard = VkKeyboard()

            keyboard.add_button('–°–µ–≥–æ–¥–Ω—è', color=VkKeyboardColor.POSITIVE)
            keyboard.add_button('–ó–∞–≤—Ç—Ä–∞', color=VkKeyboardColor.DEFAULT)
            keyboard.add_line()

            keyboard.add_button('–≠—Ç–∞ –Ω–µ–¥–µ–ª—è', color=VkKeyboardColor.DEFAULT)
            keyboard.add_button('–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è', color=VkKeyboardColor.DEFAULT)
            keyboard.add_line()

            keyboard.add_button('–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', color=VkKeyboardColor.PRIMARY)
            self.vk.messages.send(
                peer_id=user.user_id,
                random_id=get_random_id(),
                message=f'–ù–∞–π–¥–µ–Ω–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {teacher[1]}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫',
                keyboard=keyboard.get_keyboard()
            )
            self.model.update_condition_teacher(user, teacher[0])
            return teacher
        else:
            self.vk.messages.send (
				peer_id=user.user_id,
				random_id=get_random_id(),
				message='–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
			)
            self.model.update_condition_teacher(user, None)
            return None


