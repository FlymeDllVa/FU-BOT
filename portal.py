import config
import datetime
import requests
import traceback
from lxml import html

def auth(login, password):
	"""
	–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –Ω–∞ –ø–æ—Ä—Ç–∞–ª–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	:param login: –õ–æ–≥–∏–Ω –æ—Ç –ò–û–ü–∞
	:param password: –ü–∞—Ä–æ–ª—å –æ—Ç –ò–û–ü–∞
	:return: –°–µ—Å—Å–∏—è —Å –∫—É–∫–∏
	"""
	try:
		session = requests.session()
		session.post('https://portal.fa.ru/CoreAccount/LogOn', data={'Login': login, 'Pwd': password})
		return session
	except Exception as error:
		print(error)
		return auth(login, password)

### Find Teacher
def find_teacher(session, name):
	"""
	–ò—â–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ —Å–µ—Å—Å–∏–∏
	:param session: –°–µ—Å—Å–∏—è –æ—Ç –ò–û–ü–∞
	:param name: –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
	:return: –ö–æ—Ä—Ç–µ–∂ –∏–∑ ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –§–ò–û
	"""
	response = session.post('https://portal.fa.ru/CoreUser/SearchDialogResultAjax',
						data={'Name': name, 'Roles': 16})
	response = response.json()
	if not response:
		return None
	else:
		return response[0]['id'], response[0]['name']

def parse_schedule_prepod(table, day, w):
	print(table)
	"""
	–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ html —Ç–∞–±–ª–∏—Ü—ã –≤ —É–¥–æ–±–Ω—ã–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥
	:param table: html-—Ç–∞–±–ª–∏—Ü–∞
	:param day: datetime.strftime() –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã
	:param w: –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –æ—Ç 0 –¥–æ 6
	:return: –°—Ç—Ä–æ–∫—É, —É–¥–æ–±–Ω—É—é –¥–ª—è —á—Ç–µ–Ω–∏—è
	"""
	response = ''
	table = html.fromstring(table)
	disciplines = table.xpath('//tr[@class="rowDisciplines"]')
	if not disciplines:
		return f'\nüìÖ {config.WEEKDAY[w]}, {day}\n–ù–µ—Ç –ø–∞—Ä\n'
	# date_block
	timestamp = table.xpath('//tr[@class="rowDate warning"]/td[@data-field="datetime"]/text()')[0].split()
	response += f'\nüìÖ {timestamp[1][1:-1]}, {timestamp[0]}\n\n'
	for disc in disciplines:
		# time_block
		time_block = disc.xpath('./td[@data-field="datetime"]/div/text()')
		response += '‚è±{} - {}‚è±\n'.format(*time_block[:2]) # TIME
		# discipline_block
		response += '{}\n'.format(disc.xpath('.//td[@data-field="discipline"]/text()')[0].strip())
		# type_block
		response += time_block[2] + '\n' if len(time_block) > 2 else ''
		# group_block
		response += '–ì—Ä—É–ø–ø–∞: ' + ','.join(disc.xpath('./td[@data-field="groups"]/span/text()')).strip() + '\n'
		# where_block
		response += '–ö–∞–±–∏–Ω–µ—Ç: ' + disc.xpath('./td[@data-field="tutors"]/div/div/i/text()')[0].strip()[:-1] + \
			   '\n' + disc.xpath('./td[@data-field="tutors"]/div/div/i/small/text()')[0].strip() + '\n\n'
	return response

def get_schedule_prepod(session, command, prepod):
	today = (datetime.datetime.today() + datetime.timedelta(hours=3)).strftime('%d/%m/%Y')
	if prepod is None:
		return
	if command.lower() == '—Å–µ–≥–æ–¥–Ω—è':
		return parse_schedule_prepod(session.post('https://portal.fa.ru/Job/SearchAjax',
																			 data={'Date': today, 'DateBegin': today, 'DateEnd': today,
																						 'JobType': 'TUTOR',
																						 'TutorId': prepod[0], 'Tutor': prepod[1]}).text, today,
													(datetime.datetime.today() + datetime.timedelta(hours=3)).weekday())
	elif command.lower() == '–∑–∞–≤—Ç—Ä–∞':
		tomorrow = (datetime.datetime.today() + datetime.timedelta(days=1, hours=3)).strftime('%d/%m/%Y')
		return (parse_schedule_prepod(session.post('https://portal.fa.ru/Job/SearchAjax',
																				data={'Date': today, 'DateBegin': tomorrow, 'DateEnd': tomorrow,
																							'JobType': 'TUTOR',
																							'TutorId': prepod[0], 'Tutor': prepod[1]}).text, tomorrow,
												 (datetime.datetime.today() + datetime.timedelta(days=1, hours=3)).weekday()))
	elif command.lower() == '—ç—Ç–∞ –Ω–µ–¥–µ–ª—è':
		weekday = (datetime.datetime.today() + datetime.timedelta(hours=3)).weekday()
		response = ''
		for delta in range(6):
				day = (datetime.datetime.today() + datetime.timedelta(days=delta - weekday, hours=3)).strftime(
						'%d/%m/%Y')
				response += (parse_schedule_prepod(session.post('https://portal.fa.ru/Job/SearchAjax',
																						data={'Date': today, 'DateBegin': day, 'DateEnd': day,
																									'JobType': 'TUTOR',
																									'TutorId': prepod[0], 'Tutor': prepod[1]}).text, day, delta))
		return response
	elif command.lower() == '—Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è':
		weekday = (datetime.datetime.today() + datetime.timedelta(hours=3)).weekday()
		response = ''
		for delta in range(7, 13):
				day = (datetime.datetime.today() + datetime.timedelta(days=delta - weekday, hours=3)).strftime('%d/%m/%Y')
				response += (parse_schedule_prepod(session.post('https://portal.fa.ru/Job/SearchAjax',
																						data={'Date': today, 'DateBegin': day, 'DateEnd': day,
																									'JobType': 'TUTOR',
																									'TutorId': prepod[0], 'Tutor': prepod[1]}).text, day,
															 delta - 7))
	return response

def parse_schedule(table, day, w):
	"""
	–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ html —Ç–∞–±–ª–∏—Ü—ã –≤ —É–¥–æ–±–Ω—ã–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥
	:param table: html-—Ç–∞–±–ª–∏—Ü–∞
	:param day: datetime.strftime() –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã
	:param w: –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –æ—Ç 0 –¥–æ 6
	:return: –°—Ç—Ä–æ–∫—É, —É–¥–æ–±–Ω—É—é –¥–ª—è —á—Ç–µ–Ω–∏—è
	"""
	response = ''
	table = html.fromstring(table)
	disciplines = table.xpath('//tr[@class="rowDisciplines"]')
	if not disciplines:
		return f'\nüìÖ {config.WEEKDAY[w]}, {day}\n–ù–µ—Ç –ø–∞—Ä\n'
	# date_block
	timestamp = table.xpath('//tr[@class="rowDate warning"]/td[@data-field="datetime"]/text()')[0].split()
	response += f'\nüìÖ {timestamp[1][1:-1]}, {timestamp[0]}\n\n'
	for disc in disciplines:
		# time_block
		time_block = disc.xpath('./td[@data-field="datetime"]/div/text()')
		response += '‚è±{} - {}‚è±\n'.format(*time_block[:2]) # TIME
		# discipline_block
		response += '{}\n'.format(disc.xpath('.//td[@data-field="discipline"]/text()')[0].strip())
		# type_block
		response += time_block[2] + '\n' if len(time_block) > 2 else ''
		# where_block
		prepod = ', '.join([i.strip()[:-1].strip() for i in disc.xpath('./td[@data-field="tutors"]/div/div/i/text()') if i.strip()[:-1] != ''])
		if prepod:
			response += '–ì–¥–µ: ' +  prepod + "\n"
			# group_block
			response += '–ö—Ç–æ: ' + ', '.join(disc.xpath('./td[@data-field="tutors"]/div/button[@type="button"]/text()')).replace(" , ", ", ") + '\n\n'
		
	return response

def get_schedule(session, command, groupID):
	today = (datetime.datetime.today() + datetime.timedelta(hours=3)).strftime('%d/%m/%Y')
	if groupID is None:
		return
	if command.lower() == '—Å–µ–≥–æ–¥–Ω—è':
		return parse_schedule(session.post('https://portal.fa.ru/Job/SearchAjax',
																			 data={'Date': today, 'DateBegin': today,
																			  'DateEnd': today, 'JobType': 'GROUP', 'GroupId': groupID}).text, today,
													(datetime.datetime.today() + datetime.timedelta(hours=3)).weekday())
	elif command.lower() == '–∑–∞–≤—Ç—Ä–∞':
		tomorrow = (datetime.datetime.today() + datetime.timedelta(days=1, hours=3)).strftime('%d/%m/%Y')
		return (parse_schedule(session.post('https://portal.fa.ru/Job/SearchAjax',
																				data={'Date': today, 'DateBegin': tomorrow,
																				 'DateEnd': tomorrow, 'JobType': 'GROUP', 'GroupId': groupID}).text, tomorrow,
												 (datetime.datetime.today() + datetime.timedelta(days=1, hours=3)).weekday()))
	elif command.lower() == '—ç—Ç–∞ –Ω–µ–¥–µ–ª—è':
		weekday = (datetime.datetime.today() + datetime.timedelta(hours=3)).weekday()
		response = ''
		for delta in range(6):
				day = (datetime.datetime.today() + datetime.timedelta(days=delta - weekday, hours=3)).strftime(
						'%d/%m/%Y')
				response += (parse_schedule(session.post('https://portal.fa.ru/Job/SearchAjax',
																						data={'Date': today, 'DateBegin': day,
																						 'DateEnd': day, 'JobType': 'GROUP', 'GroupId': groupID}).text, day, delta))
		return response
	elif command.lower() == '—Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è':
		weekday = (datetime.datetime.today() + datetime.timedelta(hours=3)).weekday()
		response = ''
		for delta in range(7, 13):
				day = (datetime.datetime.today() + datetime.timedelta(days=delta - weekday, hours=3)).strftime('%d/%m/%Y')
				response += (parse_schedule(session.post('https://portal.fa.ru/Job/SearchAjax',
																						data={'Date': today, 'DateBegin': day,
																						 'DateEnd': day, 'JobType': 'GROUP', 'GroupId': groupID}).text, day,
															 delta - 7))
	return response






